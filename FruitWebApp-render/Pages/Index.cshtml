@page
@model IndexModel
@{
  ViewData["Title"] = "Home page";
}

@* Note: Many of the "class=" instances reference Bootstrap sytles. *@

<div class="container p-3">

  <div>
    <div class="col border-bottom" style="width:80%">
      <h2 class="display-6">Network Client list</h2>
      <p>Your network clients and their statuses</p>
    </div>
  </div>

  @* The div below handles the display of temporary messages. In this 
    project it displays the success/failure of an HTTP operation. *@
  
  <div class="container pt-4">
    <div class="row" style="width:80%">
      <div class="col">
        @if (TempData["success"] != null)
        {
          <h4>@TempData["success"]</h4>
        }
        else
        {
          <h4>@TempData["failure"]</h4>
        }
      </div>
      <div class="col text-end pb-4">
        <a asp-page="add" class="btn btn-primary mx-2 text-end" title="">
          <i class="bi bi-plus-square"></i> &nbsp;Add to list
        </a>
      </div>
    </div>
  </div>

  @* The table below displays the data retrieved from the API *@
  <table class="table table-bordered table-striped" style="width:80%">
    <thead>
      <tr>
        <th>Network Client Name</th>
        <th class="text-center">IP Address</th>
        <th class="text-center">Active?</th>
        <th class="text-center">Manage</th>
      </tr>
    </thead>

    @* Begin render API data code block *@
    <tbody>
    
      @* The Razor keyword @foreach is used to iterate through the
        data returned to the data model from the HTTP operations. *@
      @foreach (var obj in Model.NetworkClients)
      {
        <tr>
          @* Display the name of the fruit. *@
          <td width="30%">@obj.name</td>
          <td width="20%" class="text-md-center">@obj.ip</td>
          @* The following if statment is a Razor code block that changes the color 
            and icon of the available indicator in the page rendering. *@
          @{
            <td id="status-text-@obj.id" width="20%" class="text-md-center">
              <i id="status-icon-@obj.id" class="bi bi-dash-circle" style="font-size: 1rem; color: red;"></i>&nbsp;<span id="inner-@obj.id">LOADING</span>
            </td>
          }
          <td width="30%" class="text-center">
            @* The following div contains information to handle the edit and delete functions. *@
            <div class="w-75 btn-group btn-group-sm" role="group" style="text-align:center">
              @* Routes to the Edit page and passes the id of the record. *@
              <a asp-page="Edit" asp-route-id="@obj.id" class="btn btn-primary mx-2">
                <i class="bi bi-pencil-square"></i> Edit
              </a>
              @* Routes to the Delete page and passes the id of the record. *@
              <a asp-page="Delete" asp-route-id="@obj.id" class="btn btn-danger mx-2">
                <i class="bi bi-trash"></i> Delete
              </a>
            </div>
          </td>
        </tr>
      }
    </tbody>
    
    @* End render API data code block *@

  </table>
</div>

@section Scripts {
<script type="text/javascript">






async function pingClient(id) {
    const response = await fetch(`http://localhost:5051/networkclientlist/${id}/ping`, {
      method: 'GET',
      headers: {
        'Accept': '*/*'
      }
    });
  const result = await response.json();

  console.log(result);

  renderClientStatus(result.networkClient)
}

function renderAllClientStatus(){
  networkClients.forEach(client => {

      const inactiveSymbol = `<i class="bi bi-dash-circle" style="font-size: 1rem; color: red;"></i>`

      var activeSymbol = document.createElement('i'); 
      const status = client.isActive ? 'Yes' : 'No';

      if (client.isActive)
      {
        document.getElementById(`status-icon-${client.id}`).setAttribute('class', 'bi bi-check-circle');
        document.getElementById(`status-icon-${client.id}`).setAttribute('style', 'font-size: 1rem; color: green;');
      }
      else 
      {
        document.getElementById(`status-icon-${client.id}`).setAttribute('class', 'bi bi-dash-circle');
        document.getElementById(`status-icon-${client.id}`).setAttribute('style', 'font-size: 1rem; color: red;');
      }

      document.getElementById(`inner-${client.id}`).innerText = status;
  });
}

function renderClientStatus(client){

    const status = client.isActive ? 'Yes' : 'No';

    if (client.isActive)
    {
      document.getElementById(`status-icon-${client.id}`).setAttribute('class', 'bi bi-check-circle');
      document.getElementById(`status-icon-${client.id}`).setAttribute('style', 'font-size: 1rem; color: green;');
    }
    else 
    {
      document.getElementById(`status-icon-${client.id}`).setAttribute('class', 'bi bi-dash-circle');
      document.getElementById(`status-icon-${client.id}`).setAttribute('style', 'font-size: 1rem; color: red;');
    }
    document.getElementById(`inner-${client.id}`).innerText = status;
}

function pingAllClients(iClients){
  iClients.forEach(client => {
    pingClient(client.id);
  });
}



// Page execution
const networkClients = @Html.Raw(Json.Serialize(Model.NetworkClients));
//renderAllClientStatus();
pingAllClients(networkClients)
setInterval(() => pingAllClients(networkClients), 10000);

</script>
}
